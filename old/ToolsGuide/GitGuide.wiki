

== 创建版本库==
{{{code
~ mkdir 版本库的名字
~ cd 版本库的名字
~ git init

}}}

删除版本库
执行rm -rf .git

== 把文件添加到版本库 ==
从其他目录 copy 文件到本地库
{{{code
~ cp -i 源文件或目录 目标文件或目录
}}}
    i不作拷贝，只是链接文件

{{{code
~ git add readme.txt file2.txt
~ git commit -m "提交说明"

}}}

== 查看状态==
{{{code
~ git status

}}}
git status命令可以让我们时刻掌握仓库当前的状态,如果能看看具体修改了什么内容，自然是很好的，所以，需要用git diff这个命令看看：
{{{
~ git diff
}}}

== 版本回退==
一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复
在Git中，我们用git log命令查看历史记录
{{{code
~ git log
}}}
在Git中，用HEAD表示当前版本
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
我们要把当前版本回退到上一个版就可以使用git reset命令：
{{{code
~ git reset --hard HEAD^
}}}

    最新的那个版本append GPL已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？

    办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是1094adb...，于是就可以指定回到未来的某个版本：

    $ git reset --hard 1094a
    HEAD is now at 83b0afe append GPL
    版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
    如果找不到版本号怎么办，Git提供了一个命令git reflog用来记录你的每一次命令：
    
== 删除文件==
有两种情况
1、真的删除一个文件
    Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：那就用命令git rm删掉，并且git commit：
2、误删除了一个文件
    {{{code
    ~ git checkout -- 文件名
    }}}
    git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。


== 添加远程仓库==
{{{code
~ git remote add origin git@github.com:huerbt/threeEverthing.git
}}}
    远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
下一步，就可以把本地库的所有内容推送到远程库上：
{{{code
~ git push -u origin master

}}}
    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
    如果报错需要先git pull origin master// 把本地仓库的变化连接到远程仓库主分支

从现在起，只要本地作了提交，就可以通过命令：
{{{code
~ git push origin master
}}}
把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

== 从远程库克隆==
{{{code
~ git clone git@github.com:huerbt/threeEverthing.git
}}}
    然后进入到threeEverthing目录就能看到了
    
== 分值管理==

分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。

在Git里，这个分支叫主分支，即master分支

可以创建其他分支，比如
master
dev
bug
feature

=== 创建分支===
首先，我们创建dev分支，然后切换到dev分支：
{{{code
~ git checkout -b dev
}}}
    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
{{{code
~ git branch dev
~ git checkout dev
}}}

然后，用git branch命令查看当前分支：git branch命令会列出所有分支，当前分支前面会标一个*号。

切换回master分支：
{{{code
~ git checkout master
}}}

=== 合并分支===
现在，我们把dev分支的工作成果合并到master分支上：
git merge命令用于合并指定分支到当前分支
{{{code
~ git merge dev
}}}
    fast forward合并

{{{code
~ git merge --no-ff -m "merge with no-ff" dev
}}}
    请注意--no-ff参数，表示禁用Fast forward 
    因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
    加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

=== 删除分支===
{{{code
~ git branch -d dev
}}}

=== 分支策略===
在实际开发中，我们应该按照几个基本原则进行分支管理：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

== bug 分支==

当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交,幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
{{{code
~ git stash
}}}
    现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
    
首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
{{{code
~ git checkout master
}}}
    切换到 master 分支
    
{{{code
~ git checkout -b issue-101
}}}
    创建 issue-101 bug 分支

修复好然后提交 git add XXX， git commit -m "XXXX"
然后切换回 master 分支，并完成合并，最后删除 issue-101 分支

现在，是时候接着回到dev分支干活了！回到工作现场
{{{code
~ git checkout dev
~ git stash list
~ git stash pop
}}}

== Feature分支==
软件开发中，总有无穷无尽的新的功能要不断添加进来。

添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。


如果新功能必须取消！（还没有被合并）
强行删除分支
{{{code
~ git branch -D 分支名
}}}

== 标签管理==
Git有commit，为什么还要引入tag？

“请把上周一的那个版本打包发布，commit号是6a5819e...”

“一串乱七八糟的数字不好找！”

如果换一个办法：

“请把上周一的那个版本打包发布，版本号是v1.2”

“好的，按照tag v1.2查找commit就行！”

所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。

在Git中打标签非常简单，首先，切换到需要打标签的分支上：
然后，敲命令git tag <name>就可以打一个新标签：
{{{code
~ git tag v1.0
}}}
    可以用命令git tag查看所有标签
    
有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？

方法是找到历史提交的commit id，然后打上就可以了：
{{{code
~ git tag v0.9 f52c633
}}}

如果标签打错了，也可以删除
{{{code
~ git tag -d v0.1
}}}

== 忽略特殊文件==
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。最后一步就是把.gitignore也提交到Git，就完成了


