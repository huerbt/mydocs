
1. 删除一个文件夹下的所有文件
{{{!# python 
import os
path=  #要删除的文件夹路径
for i in os.listdir(path):
    path_file = os.path.join(path,i) #获取文件路径
    os.remove(path_file)
}}}

2. 判断两个文件是否相同,使用md5
{{{!# python
import hashlib
def getHash(f):
  line=f.readline()
  hash=hashlib.md5()
  while(line):
    hash.update(line)
    line=f.readline()
  return hash.hexdigest()
def IsHashEqual(f1,f2):
  str1=getHash(f1)
  str2=getHash(f2)
  return str1==str2

if __name__ == '__main__':
  f1=open("D:/2.iso","rb")
  f2=open("E:/wenjian/1.iso","rb")
  print IsHashEqual(f1,f2)

}}}

- Python open() 函数
open(name[, mode[, buffering]])
  - name : 一个包含了你要访问的文件名称的字符串值。
  - mode : mode 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。
  - buffering : 如果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。

    mode:
       -  r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
       -  rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。

3. 判断文件是否存在 Python os.access()
os.access(path, mode)
- path -- 要用来检测是否有访问权限的路径
- mode -- mode为F_OK，测试存在的路径，或者它可以是包含R_OK, W_OK和X_OK或者R_OK, W_OK和X_OK其中之一或者更多。
  	- os.F_OK: 作为access()的mode参数，测试path是否存在。
	- os.R_OK: 包含在access()的mode参数中 ， 测试path是否可读。
	- os.W_OK 包含在access()的mode参数中 ， 测试path是否可写。
	- os.X_OK 包含在access()的mode参数中 ，测试path是否可执行
