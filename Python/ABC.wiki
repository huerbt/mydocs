
ABC是指：Abstract Base Class（抽象基类），主要定义了基本类和最基本的抽象方法，可以为子类定义共有的API，不需要具体实现。

抽象基类有两个特点：

　　　　1.规定继承类必须具有抽象基类指定的方法

　　　　2.抽象基类无法实例化

　　即它的特殊之处在于只能被继承，不能被实例化基于上述两个特点，抽象基类主要用于接口设计

为什么要有抽象类
如果说类是从一堆对象中抽取相同的内容而来的，那么抽象类就是从一堆类中抽取相同的内容而来的，内容包括数据属性和函数属性。

 Python 对于ABC的支持模块是abc模块，定义了一个特殊的metaclass：ABCMeta 还有一些装饰器：@abstractmethod 和 @abstarctproperty 。abc.ABCMeta 用于在Python程序中创建抽象基类。而抽象基类如果想要声明“抽象方法”，可以使用 @abstractmethod ，如果想声明“抽象属性”，可以使用 @abstractproperty 。
 
{{{!# python 
import abc
class Human(metaclass=abc.ABCMeta):
    @abc.abstractmethod   # 规定子类必须有名为introduce的实例方法
    def introduce(self):
        pass
    
    @abc.abstractproperty  # 规定子类必须有名为country的装饰器方法
    def country(self):
        pass
    
    @abc.abstractclassmethod  # 规定子类必须有名为gender的类方法
    def gender(cls):
        pass
    @abc.abstractstaticmethod  # 规定子类必须有名为hello的静态方法
    def hello():
        pass
class Person(Human):
    __country = "China"
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def introduce(self):
        return "I'm {}, {}.".format(self.name, self.age)
    
    @property
    def country(self):
        return Person.__country
    
    @classmethod
    def gender(cls):
        return "female"
    
    @staticmethod
    def hello():
        print("What the hell?")

person = Person("Li", 24)
print(person.introduce())
print(person.country)
print(Person.gender())
person.hello()

# I'm Li, 24.
# China
# female
# What the hell? 
 
}}}
 

为了解决Python2&3的兼容问题，需要引入six模块，该模块中有一个针对类的装饰器 @six.add_metaclass(MetaClass) 可以为两个版本的Python类方便地添加metaclass

- six.with_metaclass(metaclass, *bases)¶
Create a new class with base classes bases and metaclass metaclass. This is designed to be used in class declarations like this:
{{{!# python
from six import with_metaclass

class Meta(type):
    pass

class Base(object):
    pass

class MyClass(with_metaclass(Meta, Base)):
    pass
}}}
Another way to set a metaclass on a class is with the add_metaclass()
decorator.
- six.add_metaclass(metaclass)¶
Class decorator that replaces a normally-constructed class with a metaclass-constructed one. Example usage:
@add_metaclass(Meta)
class MyClass(object):
    pass
That code produces a class equivalent to
class MyClass(object, metaclass=Meta):
    pass
on Python 3 or
class MyClass(object):
    __metaclass__ = MyMeta
on Python 2.
Note that class decorators require Python 2.6. However, the effect of the decorator can be emulated on Python 2.5 like so:
class MyClass(object):
    pass
MyClass = add_metaclass(Meta)(MyClass)





元类和抽象基类的关系(抽象基类是元类的一种应用而已）

元类的实际使用

因为在子类中会继承元类，所以元类解决了代码冗余（不要重复自己 — DRY）这一实际问题。 通常情况下，在生成类对象的同时，通过执行额外操作或添加额外代码，元类也可以帮助提取有关类创建的复杂逻辑。元类的一些实际用例包括：

- 抽象基类
- 类的注册
- 在库和框架中创建 API

关于这三者的解释，可参考https://blog.csdn.net/ddonking/article/details/81531224
的后半部分。
