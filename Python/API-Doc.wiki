API-Doc.wiki                撰写 API 级的文档（文档字符串）     Oct 14, 2018
Author: BujiBuji HuYi
Summary:
        说明什么是文档字符串，如何撰写文档字符串，文档字符串中常用到的特征
        
lastUpdate: Oct 14, 2018

=========================================================================
== Content ==

文档字符串使用 reStructedText 格式的语法书写。文档字符串的位置位于方法或类定义之后的第一行，一般用三个引号包围。

文档字符串用于说明函数，或类的参数，使用方法等信息。

    文档字符串的常用特征如下:

| 信息域和指令    | 描述                                       |
| +-------------+ | +----------------------------------------+ |
| :param          | 形式参数描述                               |
| :arg            | 用来描述实际输入参数                       |
| :key            | 关键字描述                                 |
| :type           | 形参或实参的类型                           |
| :ivar或者:var   | 任何变量的描述，通常描述实例变量           |
| :vartype        | 变量类型描述                               |
| :py:meth:       | 用来交叉引用 Python 的方法                 |
| :py:func:       | 用来交叉引用 Python 的函数                 |
| :py:class:      | 用来交叉引用 Python 的类                   |
| :py:attr:       | 用来交叉引用 Python 的属性                 |
| .. code::       | 包含任何示例代码                           |
| .. todo::       | 列出 TODO 事项                             |
| .. note::       | 将任何值得提及的内容文档化                 |
| .. warning::    | 书写警告信息                               |
| .. seealso::    | 引用编写文档字符串时任何与代码相关的内容   |
|                 |                                            |

   * 参数的描述可用如下形式
        :arg 类型 参数名: 描述
        

文档字符串样例：

class Hut:
    """Class to create hut objects in the game Attack of the Orcs
	
    :arg int number: Hut number to be assigned
    :arg AbstractGameUnit occupant: The new occupant of the Hut

    :ivar int number: A number assigned to this hut
    :ivar boolean is_acquired: A boolean flag to indicate if the
                   hut is acquired. In the current implementation
                   this is viewed from the player's perspective.
    :ivar AbstractGameUnit occupant: The occupant of this hut.
                   Needs to be an instance of the subclass of
                  `AbstractGameUnit`.

    .. seealso:: Where it is used --
            :py:meth:`attackoftheorcs.AttackOfTheOrcs.setup_game_scenario`
    """
    def __init__(self, number, occupant):
        self.occupant = occupant
        self.number = number
        self.is_acquired = False

    def acquire(self, new_occupant):
        """Update the occupant of this hut and set is_acquired flag.

        Update the occupant instance variable with the parameter new_occupant
        and set the is_acquired flag to True.

        :arg new_occupant: self.occupant will be updated with this parameter

        .. todo:: In the current implementation this is supposed to be
                  called only by the `Knight` instance (everything from the
                  player context. A generalization is to allow anyone to
                  'acquire' the hut! In that case, the client code
                  should properly interpret meaning of `is_acquired` flag!
                  Otherwise it will be a bug! As an exercise, write a unit test
                  to catch this and/or make the calling code robust.
        """
        self.occupant = new_occupant
        self.is_acquired = True
        print_bold("GOOD JOB! Hut %d acquired" % self.number)
        

Sphinx 官网提供的文档字符串样例

http://www.sphinx-doc.org/en/stable/usage/restructuredtext/domains.html





The Python domain (name py) provides the following directives for module declarations:

.. py:module:: name
This directive marks the beginning of the description of a module (or package submodule, in which case the name should be fully qualified, including the package name). It does not create content (like e.g. py:class does).

This directive will also cause an entry in the global module index.

The platform option, if present, is a comma-separated list of the platforms on which the module is available (if it is available on all platforms, the option should be omitted). The keys are short identifiers; examples that are in use include “IRIX”, “Mac”, “Windows”, and “Unix”. It is important to use a key which has already been used when applicable.

The synopsis option should consist of one sentence describing the module’s purpose – it is currently only used in the Global Module Index.

The deprecated option can be given (with no value) to mark a module as deprecated; it will be designated as such in various locations then.

.. py:currentmodule:: name
This directive tells Sphinx that the classes, functions etc. documented from here are in the given module (like py:module), but it will not create index entries, an entry in the Global Module Index, or a link target for py:mod. This is helpful in situations where documentation for things in a module is spread over multiple files or sections – one location has the py:module directive, the others only py:currentmodule.

The following directives are provided for module and class contents:

.. py:function:: name(parameters)
Describes a module-level function. The signature should include the parameters as given in the Python function definition, see Python Signatures. For example:

.. py:function:: Timer.repeat(repeat=3, number=1000000)
For methods you should use py:method.

The description normally includes information about the parameters required and how they are used (especially whether mutable objects passed as parameters are modified), side effects, and possible exceptions.

This information can (in any py directive) optionally be given in a structured form, see Info field lists.

.. py:data:: name
Describes global data in a module, including both variables and values used as “defined constants.” Class and object attributes are not documented using this environment.

.. py:exception:: name
Describes an exception class. The signature can, but need not include parentheses with constructor arguments.

.. py:class:: name
.. py:class:: name(parameters)
Describes a class. The signature can optionally include parentheses with parameters which will be shown as the constructor arguments. See also Python Signatures.

Methods and attributes belonging to the class should be placed in this directive’s body. If they are placed outside, the supplied name should contain the class name so that cross-references still work. Example:

.. py:class:: Foo

   .. py:method:: quux()

-- or --

.. py:class:: Bar

.. py:method:: Bar.quux()
The first way is the preferred one.

.. py:attribute:: name
Describes an object data attribute. The description should include information about the type of the data to be expected and whether it may be changed directly.

.. py:method:: name(parameters)
Describes an object method. The parameters should not include the self parameter. The description should include similar information to that described for function. See also Python Signatures and Info field lists.

.. py:staticmethod:: name(parameters)
Like py:method, but indicates that the method is a static method.

New in version 0.4.

.. py:classmethod:: name(parameters)
Like py:method, but indicates that the method is a class method.

New in version 0.6.

.. py:decorator:: name
.. py:decorator:: name(parameters)
Describes a decorator function. The signature should represent the usage as a decorator. For example, given the functions

def removename(func):
    func.__name__ = ''
    return func

def setnewname(name):
    def decorator(func):
        func.__name__ = name
        return func
    return decorator

the descriptions should look like this:

.. py:decorator:: removename

   Remove name of the decorated function.

.. py:decorator:: setnewname(name)

   Set name of the decorated function to *name*.
(as opposed to .. py:decorator:: removename(func).)

There is no py:deco role to link to a decorator that is marked up with this directive; rather, use the py:func role.

.. py:decoratormethod:: name
.. py:decoratormethod:: name(signature)
Same as py:decorator, but for decorators that are methods.

Refer to a decorator method using the py:meth role.

Python Signatures
Signatures of functions, methods and class constructors can be given like they would be written in Python.

Default values for optional arguments can be given (but if they contain commas, they will confuse the signature parser). Python 3-style argument annotations can also be given as well as return type annotations:

.. py:function:: compile(source : string, filename, symbol='file') -> ast object
For functions with optional parameters that don’t have default values (typically functions implemented in C extension modules without keyword argument support), you can use brackets to specify the optional parts:

compile(source[, filename[, symbol]])
It is customary to put the opening bracket before the comma.


----
inside Python object description directives, reST field lists with these fields are recognized and formatted nicely:

param, parameter, arg, argument, key, keyword: Description of a parameter.
type: Type of a parameter. Creates a link if possible.
raises, raise, except, exception: That (and when) a specific exception is raised.
var, ivar, cvar: Description of a variable.
vartype: Type of a variable. Creates a link if possible.
returns, return: Description of the return value.
rtype: Return type. Creates a link if possible.

The field names must consist of one of these keywords and an argument (except for returns and rtype, which do not need an argument). This is best explained by an example:


.. py:function:: send_message(sender, recipient, message_body, [priority=1])

   Send a message to a recipient

   :param str sender: The person sending the message
   :param str recipient: The recipient of the message
   :param str message_body: The body of the message
   :param priority: The priority of the message, can be a number 1-5
   :type priority: integer or None
   :return: the message id
   :rtype: int
   :raises ValueError: if the message_body exceeds 160 characters
   :raises TypeError: if the message_body is not a basestring

Multiple types in a type field will be linked automatically if separated by the word “or”:

:type an_arg: int or None
:vartype a_var: str or int
:rtype: float or str


Cross-referencing Python objects
The following roles refer to objects in modules and are possibly hyperlinked if a matching identifier is found:

:py:mod:
Reference a module; a dotted name may be used. This should also be used for package names.

:py:func:
Reference a Python function; dotted names may be used. The role text needs not include trailing parentheses to enhance readability; they will be added automatically by Sphinx if the add_function_parentheses config value is True (the default).

:py:data:
Reference a module-level variable.

:py:const:
Reference a “defined” constant. This may be a Python variable that is not intended to be changed.

:py:class:
Reference a class; a dotted name may be used.

:py:meth:
Reference a method of an object. The role text can include the type name and the method name; if it occurs within the description of a type, the type name can be omitted. A dotted name may be used.

:py:attr:
Reference a data attribute of an object.

:py:exc:
Reference an exception. A dotted name may be used.

:py:obj:
Reference an object of unspecified type
