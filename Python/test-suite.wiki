test-suite.wiki             编写并运行测试套件                   Oct 16, 2018
Author: BujiBuji HuYi
Summary
       一个测试套件的样子，关于 setUp，tearDown，测试生成器，测试断言，测试覆盖率

lastUpdate:Oct 16,2018

============================================================================

== Content ==

1. 一个测试套件的例子

{{{!#python
import unittest

class MyUnitTests(unittest.TestCase):
    def setUp(self):
        print("In setUp..")
    
    def tearDown(self):
        print("Tearing Down the test.")
        print("~"*10)
    
    def test_2(self):
        print("in test_2")
        self.assertEqual(1+1, 2)
    
    def test_1(self):
        print(:in test_1")
        self.assertTrue(1+1 == 2)
    
    def will_not_be_called(self):
        ''' 非测试方法通常用于在不同的测试之间共享代码'''
        print("this method will not be called automatically")

if __name__ == '__main__':
    unittest,main()

}}}


2. 关于 setUp，tearDown
	
	setUp：每个测试执行前被调用，它允许在测试被执行之前初始化一些常见变量

	tearDown：每个测试执行之后会被调用，长用于关闭文件读取等

3. 测试生成器
	
	不用手动对列表的每个元素创建测试，测试生成器会对列表项逐一进行测试（与 nose 配合）

	测试生成器的关键是使用 yield 语句(*原理*：在函数体内yield 和 return 只能二选一，使用 yield关键字时并不会返回结果，而是返回一个与原函数绑定的生成器对象，对生成器对象连续调用python 内置的 next()函数可以不断获得 yield语句返回的变量。实际情况就是测试列表中的每个元素（元组），都会终止函数以等待测试结果，通过就继续测试下一个元素。)

    例子：
{{{!#python
from nose.tools import assert_equal

def add2(x,y):
    return x + y

def check_add2(exp, x, y):
    obs = add2(x, y)
    assert_equal(exp,obs)
    
def test_add2():
    cases = [
        (4, 2, 2),
        (5, -5, 10),
        (42, 40, 2),
        (16, 3 , 13),
        (-128, 0, -128),
        ]
        
    for exp, x, y in cases:
        yield check_add2, exp, x, y # 注意写法

}}}

4. 常用的测试断言

| 序号 | 断言方法                                | 断言描述                               |
| 1    | assertEqual(arg1, arg2, msg=None)       | 验证arg1=arg2，不等则fail              |
| 2    | assertNotEqual(arg1, arg2, msg=None)    | 验证arg1 != arg2, 相等则fail           |
| 3    | assertTrue(expr, msg=None)              | 验证expr是true，如果为false，则fail    |
| 4    | assertFalse(expr,msg=None)              | 验证expr是false，如果为true，则fail    |
| 5    | assertIs(arg1, arg2, msg=None)          | 验证arg1、arg2是同一个对象，不是则fail |
| 6    | assertIsNot(arg1, arg2, msg=None)       | 验证arg1、arg2不是同一个对象，是则fail |
| 7    | assertIsNone(expr, msg=None)            | 验证expr是None，不是则fail             |
| 8    | assertIsNotNone(expr, msg=None)         | 验证expr不是None，是则fail             |
| 9    | assertIn(arg1, arg2, msg=None)          | 验证arg1是arg2的子串，不是则fail       |
| 10   | assertNotIn(arg1, arg2, msg=None)       | 验证arg1不是arg2的子串，是则fail       |
| 11   | assertIsInstance(obj, cls, msg=None)    | 验证obj是cls的实例，不是则fail         |
| 12   | assertNotIsInstance(obj, cls, msg=None) | 验证obj不是cls的实例，是则fail         |
|      |                                         |                                        |

5. 测试覆盖率

运行测试套件并计算已执行的代码行数，将其除以软件项目中的总行数就是测试覆盖率
1、安装
    ~ pip install coverage

2.0 nose 中的 coverage 的执行
    ~ nosetests --with-coverage
        Enable plugin Coverage: Activate a coverage report using Ned
        Batchelder’s coverage module. [NOSE_WITH_COVERAGE]
    ~ nosetests --cover-tests
        Include test modules in coverage report [NOSE_COVER_TESTS]
        
2.1、普通 coverage  执行
    ~ coverage run -m 模块名（就像 import 语句一样，不是路径的写法）&& coverage
    report
    sample:
    cd myporj
    coverage run -m test.test_myporj && coverage report
3、注意
    测试覆盖率的100%是具有一定的欺骗性的。是重要的聊胜于无的工具。

